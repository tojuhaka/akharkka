
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 23 01:58:40 EEST 2011
//----------------------------------------------------

package demogame;

import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 23 01:58:40 EEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\012\002\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\013\002\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\004" +
    "\000\002\013\004\000\002\003\002\000\002\003\004\000" +
    "\002\003\004\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\044\004\022\005\006\006\026\025\021\026" +
    "\023\027\017\030\010\031\024\032\020\033\013\034\014" +
    "\041\015\045\030\046\005\050\011\051\025\052\012\001" +
    "\002\000\032\012\036\013\033\014\037\016\032\017\034" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\035\uffd9\042\uffd9\043" +
    "\uffd9\001\002\000\024\012\uffde\013\uffde\014\uffde\016\uffde" +
    "\017\uffde\036\uffde\037\uffde\040\uffde\047\uffde\001\002\000" +
    "\024\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\016\ufffc\017\ufffc\044\ufffc\001\002\000\024\007\uffd9\010" +
    "\uffd9\011\uffd9\012\036\013\033\014\037\016\032\017\034" +
    "\044\uffd9\001\002\000\032\012\uffec\013\uffec\014\uffec\016" +
    "\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec\035\uffec" +
    "\042\uffec\043\uffec\001\002\000\024\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\044\ufffa" +
    "\001\002\000\024\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\044\ufff8\001\002\000\024" +
    "\012\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\047\uffe1\001\002\000\024\012\uffdf\013\uffdf" +
    "\014\uffdf\016\uffdf\017\uffdf\036\uffdf\037\uffdf\040\uffdf\047" +
    "\uffdf\001\002\000\024\012\uffe0\013\uffe0\014\uffe0\016\uffe0" +
    "\017\uffe0\036\uffe0\037\uffe0\040\uffe0\047\uffe0\001\002\000" +
    "\004\002\054\001\002\000\032\012\uffed\013\uffed\014\uffed" +
    "\016\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed\035" +
    "\uffed\042\uffed\043\uffed\001\002\000\032\012\uffea\013\uffea" +
    "\014\uffea\016\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\035\uffea\042\uffea\043\uffea\001\002\000\032\012\uffef" +
    "\013\uffef\014\uffef\016\uffef\017\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\035\uffef\042\uffef\043\uffef\001\002\000\024" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016" +
    "\ufffd\017\ufffd\044\ufffd\001\002\000\032\012\uffee\013\uffee" +
    "\014\uffee\016\uffee\017\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\035\uffee\042\uffee\043\uffee\001\002\000\032\012\uffeb" +
    "\013\uffeb\014\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\035\uffeb\042\uffeb\043\uffeb\001\002\000\024" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016" +
    "\ufff9\017\ufff9\044\ufff9\001\002\000\024\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\017\ufffb\044" +
    "\ufffb\001\002\000\024\012\036\013\033\014\037\016\032" +
    "\017\034\036\uffd9\037\uffd9\040\uffd9\047\uffd9\001\002\000" +
    "\032\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\035\uffe9\042\uffe9\043\uffe9\001" +
    "\002\000\052\002\uffd3\004\022\005\006\006\026\015\050" +
    "\020\051\025\021\026\023\027\017\030\010\031\024\032" +
    "\020\033\013\034\014\041\015\045\030\046\005\050\011" +
    "\051\025\052\012\001\002\000\052\007\uffd9\010\uffd9\011" +
    "\uffd9\012\036\013\033\014\037\016\032\017\034\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\047\uffd9\001\002\000\040" +
    "\007\uffd7\010\uffd7\011\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\047\uffd7\001\002\000\052\007\uffd9\010\uffd9\011" +
    "\uffd9\012\036\013\033\014\037\016\032\017\034\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\047\uffd9\001\002\000\012" +
    "\036\041\037\040\040\042\047\043\001\002\000\040\007" +
    "\uffd8\010\uffd8\011\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\047\uffd8\001\002\000\040\007\uffd6\010\uffd6\011\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6\047\uffd6\001\002" +
    "\000\052\002\uffdc\004\uffdc\005\uffdc\006\uffdc\015\uffdc\020" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\041\uffdc\045\uffdc\046\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\001\002\000\052\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\015\uffdd\020\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\041\uffdd\045\uffdd" +
    "\046\uffdd\050\uffdd\051\uffdd\052\uffdd\001\002\000\052\002" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\015\uffdb\020\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\041\uffdb\045\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\001\002\000\052\002\uffda\004\uffda\005\uffda\006\uffda\015" +
    "\uffda\020\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\041\uffda\045\uffda\046\uffda\050" +
    "\uffda\051\uffda\052\uffda\001\002\000\040\007\uffd4\010\uffd4" +
    "\011\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044\uffd4\047\uffd4" +
    "\001\002\000\040\007\uffd5\010\uffd5\011\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\047\uffd5\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\uffd0\001\002\000\044\004\022" +
    "\005\006\006\026\025\021\026\023\027\017\030\010\031" +
    "\024\032\020\033\013\034\014\041\015\045\030\046\005" +
    "\050\011\051\025\052\012\001\002\000\052\002\uffd3\004" +
    "\022\005\006\006\026\015\050\020\051\025\021\026\023" +
    "\027\017\030\010\031\024\032\020\033\013\034\014\041" +
    "\015\045\030\046\005\050\011\051\025\052\012\001\002" +
    "\000\004\002\uffd1\001\002\000\004\002\uffd2\001\002\000" +
    "\004\002\000\001\002\000\012\007\064\010\073\011\076" +
    "\044\066\001\002\000\122\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\uffd9\010\uffd9\011\uffd9\012\036\013\033\014\037" +
    "\015\ufff3\016\032\017\034\020\ufff3\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\ufff3\042\uffd9\043\uffd9\044\uffd9\045\ufff3\046\ufff3" +
    "\047\uffd9\050\ufff3\051\ufff3\052\ufff3\001\002\000\052\002" +
    "\uffd3\004\022\005\006\006\026\015\050\020\051\025\021" +
    "\026\023\027\017\030\010\031\024\032\020\033\013\034" +
    "\014\041\015\045\030\046\005\050\011\051\025\052\012" +
    "\001\002\000\040\007\064\010\073\011\076\021\074\022" +
    "\065\023\075\024\070\035\071\036\041\037\040\040\042" +
    "\042\067\043\072\044\066\047\043\001\002\000\052\002" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\015\ufff2\020\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\041\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\001\002\000\052\002\ufff0\004\ufff0\005\ufff0\006\ufff0\015" +
    "\ufff0\020\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\041\ufff0\045\ufff0\046\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\001\002\000\052\002\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\015\ufff1\020\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\041\ufff1" +
    "\045\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\001\002\000" +
    "\122\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\001\002\000\052\002\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\015\uffe7\020\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\041\uffe7\045\uffe7" +
    "\046\uffe7\050\uffe7\051\uffe7\052\uffe7\001\002\000\122\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\001\002\000\052\002\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\015\uffe3\020\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\041\uffe3\045\uffe3\046\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\001\002\000\052\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\015\uffe5\020\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\041" +
    "\uffe5\045\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\001\002" +
    "\000\052\002\uffe4\004\uffe4\005\uffe4\006\uffe4\015\uffe4\020" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\041\uffe4\045\uffe4\046\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\001\002\000\052\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\015\uffe2\020\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\041\uffe2\045\uffe2" +
    "\046\uffe2\050\uffe2\051\uffe2\052\uffe2\001\002\000\122\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\001\002\000\052\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\015\uffe8\020\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\041\uffe8\045\uffe8\046\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\001\002\000\052\002\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\015\uffe6\020\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\041" +
    "\uffe6\045\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\001\002" +
    "\000\122\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\001\002\000\004\002\001\001\002\000" +
    "\020\021\074\022\065\023\075\024\070\035\071\042\067" +
    "\043\072\001\002\000\052\002\uffd3\004\022\005\006\006" +
    "\026\015\050\020\051\025\021\026\023\027\017\030\010" +
    "\031\024\032\020\033\013\034\014\041\015\045\030\046" +
    "\005\050\011\051\025\052\012\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\012\002\015\004\006\005\003\006\026\001" +
    "\001\000\006\011\100\013\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\055\013\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\030\013\034" +
    "\001\001\000\002\001\001\000\014\002\046\003\045\004" +
    "\006\005\003\006\026\001\001\000\004\013\044\001\001" +
    "\000\002\001\001\000\004\013\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\052\004\006\005\003\006\026\001" +
    "\001\000\014\002\046\003\051\004\006\005\003\006\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\062\010\060\011\061" +
    "\012\056\013\057\001\001\000\014\002\046\003\076\004" +
    "\006\005\003\006\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\046\003\101\004\006\005\003\006\026\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void unrecovered_syntax_error(Symbol cur_token) {
   //do nothing, game handles the error
  }
  
  public void syntax_error(Symbol cur_token) {
   //do nothing, game handles the error
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONT ::= E 
            {
              ArrayList<Action> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Action> e = (ArrayList<Action>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONT ::= and CONT 
            {
              ArrayList<Action> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Action> c = (ArrayList<Action>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONT ::= then E 
            {
              ArrayList<Action> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Action> e = (ArrayList<Action>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONT ::= 
            {
              ArrayList<Action> RESULT =null;
		RESULT = new ArrayList<Action>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PAS ::= on PAS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PAS ::= at PAS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PAS ::= an 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PAS ::= a 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PAS ::= the 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PAS ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NPC ::= PAS gustav 
            {
              Target RESULT =null;
		 RESULT = Target.gustav; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NPC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NPC ::= PAS princess 
            {
              Target RESULT =null;
		RESULT = Target.princess;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NPC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NPC ::= PAS boss 
            {
              Target RESULT =null;
		RESULT = Target.boss;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NPC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NPC ::= PAS goblin 
            {
              Target RESULT =null;
		RESULT = Target.goblin;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NPC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NPC_ACTION ::= hug 
            {
              Act RESULT =null;
		RESULT = Act.hug; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NPC_ACTION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NPC_ACTION ::= kill 
            {
              Act RESULT =null;
		RESULT = Act.kill; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NPC_ACTION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NPC_ACTION ::= talkto 
            {
              Act RESULT =null;
		RESULT = Act.talkto;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NPC_ACTION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NPC_ACTION ::= talk 
            {
              Act RESULT =null;
		RESULT = Act.talk;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NPC_ACTION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OBJECT ::= PAS window 
            {
              Target RESULT =null;
		RESULT = Target.window; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OBJECT ::= PAS back 
            {
              Target RESULT =null;
		RESULT = Target.back; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OBJECT ::= PAS hallway 
            {
              Target RESULT =null;
		RESULT = Target.hallway; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OBJECT ::= PAS door 
            {
              Target RESULT =null;
		RESULT = Target.door; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OBJECT ::= PAS chair 
            {
              Target RESULT =null;
		RESULT = Target.chair; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OBJECT ::= PAS workbench 
            {
              Target RESULT =null;
		RESULT = Target.workbench; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OBJECT ::= PAS wall 
            {
              Target RESULT =null;
		RESULT = Target.wall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OBJECT_ACTION ::= look 
            {
              Act RESULT =null;
		RESULT = Act.look; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT_ACTION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OBJECT_ACTION ::= examine 
            {
              Act RESULT =null;
		RESULT = Act.examine; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT_ACTION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OBJECT_ACTION ::= pull 
            {
              Act RESULT =null;
		RESULT = Act.pull; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT_ACTION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OBJECT_ACTION ::= push 
            {
              Act RESULT =null;
		RESULT = Act.push; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT_ACTION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OBJECT_ACTION ::= open 
            {
              Act RESULT =null;
		RESULT = Act.open; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT_ACTION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OBJECT_ACTION ::= gotu 
            {
              Act RESULT =null;
		RESULT = Act.gotu; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT_ACTION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OBJECT_ACTION ::= go 
            {
              Act RESULT =null;
		RESULT = Act.go; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT_ACTION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TOOL_TARGET ::= OBJECT 
            {
              Target RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Target a = (Target)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_TARGET",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TOOL_TARGET ::= TOOL 
            {
              Target RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Target a = (Target)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_TARGET",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TOOL_TARGET ::= NPC 
            {
              Target RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Target a = (Target)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_TARGET",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TOOL_TARGET ::= 
            {
              Target RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_TARGET",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TOOL ::= PAS pillowcase 
            {
              Target RESULT =null;
		RESULT = Target.pillowcase;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TOOL ::= PAS axe 
            {
              Target RESULT =null;
		RESULT = Target.axe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TOOL ::= PAS hammer 
            {
              Target RESULT =null;
		RESULT = Target.hammer; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TOOL ::= PAS candle 
            {
              Target RESULT =null;
		RESULT = Target.candle; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TOOL_ACTION ::= toss 
            {
              Act RESULT =null;
		 RESULT = Act.toss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_ACTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TOOL_ACTION ::= dismiss 
            {
              Act RESULT =null;
		 RESULT = Act.dismiss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_ACTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TOOL_ACTION ::= drop 
            {
              Act RESULT =null;
		 RESULT = Act.drop; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_ACTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TOOL_ACTION ::= get 
            {
              Act RESULT =null;
		RESULT = Act.get; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_ACTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TOOL_ACTION ::= take 
            {
              Act RESULT =null;
		RESULT = Act.take; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_ACTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TOOL_ACTION ::= use 
            {
              Act RESULT =null;
		RESULT = Act.use; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOOL_ACTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= NPC_ACTION NPC CONT 
            {
              ArrayList<Action> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Act a = (Act)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Target b = (Target)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Action> c = (ArrayList<Action>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ArrayList<Action>();
                    Action action = new Action(Type.NPC, a, b);
                    RESULT.add(action);
                    for (Action s : c) { RESULT.add(s); }
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= OBJECT_ACTION OBJECT CONT 
            {
              ArrayList<Action> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Act a = (Act)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Target b = (Target)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Action> c = (ArrayList<Action>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ArrayList<Action>();
                    Action action = new Action(Type.OBJECT, a, b);
                    RESULT.add(action);
                    for (Action s : c) { RESULT.add(s); }
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= E EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Action> start_val = (ArrayList<Action>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // E ::= TOOL_ACTION TOOL TOOL_TARGET CONT 
            {
              ArrayList<Action> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Act a = (Act)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Target b = (Target)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Target c = (Target)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Action> d = (ArrayList<Action>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ArrayList<Action>();
                    Action action = new Action(Type.TOOL, a, b,c);
                    RESULT.add(action);
                    for (Action s : d) { RESULT.add(s); }
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

